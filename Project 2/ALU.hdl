// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code

    //x operations
    Mux16(a=x, b[0..15]=false, sel=zx, out=newx); // Zero x?
    Not16(in=newx, out=notx); // Negate x
    Mux16(a=newx, b=notx, sel=nx, out=newx2); // Negate x?

    // y operations
    Mux16(a=y, b[0..15]=false, sel=zy, out=newy); // Zero y?
    Not16(in=newy, out=noty); // Negate y
    Mux16(a=newy, b=noty, sel=ny, out=newy2); // Negate y?

    //f operation
    Add16(a=newx2, b=newy2, out=addxy);
    And16(a=newx2, b=newy2, out=andxy);
    Mux16(a=andxy, b=addxy, sel=f, out=preOut);

    //no operation
    Not16(in=preOut, out=negPreOut);
    Mux16(a=preOut, b=negPreOut, sel=no, out=preOut2);

    //zr and ng outputs
    And16(a=preOut2, b[0..15]=true, out[15]=ng);
    And16(a=preOut2, b=preOut2, out[0..7]=preOut21);
    And16(a=preOut2, b=preOut2, out[8..15]=preOut22);
    Or8Way(in=preOut21, out=zr1);
    Or8Way(in=preOut22, out=zr2);
    Or(a=zr1, b=zr2, out=zr3);
    Not(in=zr3, out=zr);
    And16(a=preOut2, b=preOut2, out=out);
}